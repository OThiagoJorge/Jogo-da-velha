{"ast":null,"code":"var _jsxFileName = \"/home/thiago/\\xC1rea de trabalho/jogo-da-velha/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  isWinningSquare\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `square ${isWinningSquare ? 'winning' : ''}`,\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  winningSquares\n}) {\n  var _calculateWinner;\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares, i);\n  }\n  const winner = (_calculateWinner = calculateWinner(squares)) === null || _calculateWinner === void 0 ? void 0 : _calculateWinner.winner;\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n  const boardRows = [0, 1, 2].map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-row\",\n    children: [0, 1, 2].map(col => {\n      const index = row * 3 + col;\n      return /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[index],\n        onSquareClick: () => handleClick(index),\n        isWinningSquare: winningSquares === null || winningSquares === void 0 ? void 0 : winningSquares.includes(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this);\n    })\n  }, row, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), boardRows]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null),\n    location: null\n  }]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [isAscending, setIsAscending] = useState(true);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove].squares;\n  const winningData = calculateWinner(currentSquares);\n  function handlePlay(nextSquares, index) {\n    const nextHistory = [...history.slice(0, currentMove + 1), {\n      squares: nextSquares,\n      location: getLocation(index)\n    }];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  function toggleOrder() {\n    setIsAscending(!isAscending);\n  }\n  const moves = history.map((step, move) => {\n    const description = move ? `Go to move #${move} (${step.location.row}, ${step.location.col})` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: move === currentMove ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"You are at move #\", move]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  });\n  if (!isAscending) {\n    moves.reverse();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        winningSquares: winningData === null || winningData === void 0 ? void 0 : winningData.line\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleOrder,\n        children: \"Toggle Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"3/HFgG6UIO3Po/IEdAYtU6bpx/c=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: [a, b, c]\n      };\n    }\n  }\n  return null;\n}\nfunction getLocation(index) {\n  const row = Math.floor(index / 3);\n  const col = index % 3;\n  return {\n    row,\n    col\n  };\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","isWinningSquare","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","winningSquares","_calculateWinner","handleClick","i","calculateWinner","nextSquares","slice","winner","status","boardRows","map","row","col","index","includes","_c2","Game","_s","history","setHistory","Array","fill","location","currentMove","setCurrentMove","isAscending","setIsAscending","currentSquares","winningData","handlePlay","nextHistory","getLocation","length","jumpTo","nextMove","toggleOrder","moves","step","move","description","reverse","line","_c3","lines","a","b","c","Math","floor","$RefreshReg$"],"sources":["/home/thiago/Área de trabalho/jogo-da-velha/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css'\n\nfunction Square({ value, onSquareClick, isWinningSquare }) {\n  return (\n    <button className={`square ${isWinningSquare ? 'winning' : ''}`} onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay, winningSquares }) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares, i);\n  }\n\n  const winner = calculateWinner(squares)?.winner;\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  const boardRows = [0, 1, 2].map(row => (\n    <div className=\"board-row\" key={row}>\n      {[0, 1, 2].map(col => {\n        const index = row * 3 + col;\n        return (\n          <Square\n            key={index}\n            value={squares[index]}\n            onSquareClick={() => handleClick(index)}\n            isWinningSquare={winningSquares?.includes(index)}\n          />\n        );\n      })}\n    </div>\n  ));\n\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {boardRows}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null), location: null }]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [isAscending, setIsAscending] = useState(true);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove].squares;\n  const winningData = calculateWinner(currentSquares);\n\n  function handlePlay(nextSquares, index) {\n    const nextHistory = [\n      ...history.slice(0, currentMove + 1),\n      { squares: nextSquares, location: getLocation(index) },\n    ];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  function toggleOrder() {\n    setIsAscending(!isAscending);\n  }\n\n  const moves = history.map((step, move) => {\n    const description = move ? `Go to move #${move} (${step.location.row}, ${step.location.col})` : 'Go to game start';\n    return (\n      <li key={move}>\n        {move === currentMove ? (\n          <span>You are at move #{move}</span>\n        ) : (\n          <button onClick={() => jumpTo(move)}>{description}</button>\n        )}\n      </li>\n    );\n  });\n\n  if (!isAscending) {\n    moves.reverse();\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          xIsNext={xIsNext}\n          squares={currentSquares}\n          onPlay={handlePlay}\n          winningSquares={winningData?.line}\n        />\n      </div>\n      <div className=\"game-info\">\n        <button onClick={toggleOrder}>Toggle Order</button>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: [a, b, c] };\n    }\n  }\n  return null;\n}\n\nfunction getLocation(index) {\n  const row = Math.floor(index / 3);\n  const col = index % 3;\n  return { row, col };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}